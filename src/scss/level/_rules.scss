@for $cell-number from 1 through $number-of-cells {
  /*
    we set same --from-CURRENT-to-CURRENT - the problem of scope!
    to cell's label
    and to win rule
  */
  $var: #{"--from-" + $cell-number + "-to-" + $cell-number + "-inverted"};
  #cb#{$cell-number}:not(:checked) ~ .scope {
    #{$var}: 1;
  }

  #cb#{$cell-number}:checked ~ .scope {
    #{$var}: 0;
  }

  /*
    do the same for all linked cell
  */
  @each $affecteds-array in nth($cells-links, $cell-number) {
    @each $affected in $affecteds-array {
      $var: #{ "--from-" + $cell-number + "-to-" + $affected + "-inverted" };
      #cb#{$cell-number}:not(:checked) ~ .scope {
        #{$var}: 1;
      }
      #cb#{$cell-number}:checked ~ .scope {
          #{$var}: 0;
      }
    }
  }
}

/*
  Each cell may invert other cells
*/
@for $cell-number from 1 through $number-of-cells {
  $index: 1;
  
  .scope {
    // is cell inverted by itself?
    --inversion-#{$cell-number}-#{$index}: var(--from-#{$cell-number}-to-#{$cell-number}-inverted);

    @for $cn from 1 through $number-of-cells {
      @if contains(nth($cells-links, $cn), $cell-number) {
        $index: $index + 1;
        --inversion-#{$cell-number}-#{$index}: calc(
          #{ xorVars(var(--inversion-#{$cell-number}-#{$index - 1}), var(--from-#{$cn}-to-#{$cell-number}-inverted)) }
        );
      }
    }

    --#{$cell-number}-inverted: var(--inversion-#{$cell-number}-#{$index});
  }

  #s#{$cell-number} {
    background-position-y: calc(var(--inversion-#{$cell-number}-#{$index}) * #{$cell-width} * 2);
  }
}
