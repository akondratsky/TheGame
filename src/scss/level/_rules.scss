@for $cell-number from 1 through $number-of-cells {
  /*
    we set same --from-CURRENT-to-CURRENT - the problem of scope!
    to cell's label
    and to win rule
  */
  $var: #{"--from-" + $cell-number + "-to-" + $cell-number + "-inverted"};
  #cb#{$cell-number}:not(:checked) ~ .scope {
    #{$var}: 1;
  }

  #cb#{$cell-number}:checked ~ .scope {
    #{$var}: 0;
  }

  /*
    do the same for all linked cell
  */
  @each $affecteds-array in nth($cells-links, $cell-number) {
    @each $affected in $affecteds-array {
      $var: #{ "--from-" + $cell-number + "-to-" + $affected + "-inverted" };
      #cb#{$cell-number}:not(:checked) ~ .scope {
        #{$var}: 1;
      }
      #cb#{$cell-number}:checked ~ .scope {
          #{$var}: 0;
      }
    }
  }
}

/*
  Each cell may invert other cells
*/
@for $cell-number from 1 through $number-of-cells {
  // is it inverted itself?
  $inverted: #{ "var(--from-" + $cell-number + "-to-" + $cell-number + "-inverted)"};

  @for $cn from 1 through $number-of-cells {
    @if contains(nth($cells-links, $cn), $cell-number) {
      $currentInverted: #{ "var(--from-" + $cn + "-to-" + $cell-number + "-inverted)"};
      $inverted: #{ xorVars($inverted, $currentInverted) };
    }
  }
  
  $var: #{ "--" + $cell-number + "-inverted" };

  .scope {
    #{ $var }: calc(#{ $inverted });
  }

  #s#{$cell-number} {
    background-position-y: #{ "calc(var(" + $var + ") * " + $cell-width + " * 2)" };
  }
}
